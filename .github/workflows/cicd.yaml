name: CI/CD to ECS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: fargateapp
  ECS_SERVICE: fargate-app-service
  ECS_CLUSTER: fargate-cluster
  ECS_TASK_DEFINITION: fargate-app-task
  CONTAINER_NAME: "fargateapp"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Retrieve the current ECS task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --region ${{ env.AWS_REGION }} \
            > task-definition.json
          
      - name: Debug task definition contents
        run: |
          cat task-definition.json

      - name: Update the ECS task definition with the new image
        id: update-task-def
        run: |
          NEW_IMAGE=${{ steps.build-image.outputs.image }}
          # Ensure NEW_IMAGE is populated
          echo "NEW_IMAGE is: $NEW_IMAGE"
          
          # Use jq to update the container image in the task definition
          cat task-definition.json | jq '.taskDefinition | .containerDefinitions[0].image = env.NEW_IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)' > updated-task-definition.json

      - name: Register the updated ECS task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "taskDefinitionArn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy updated task definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.register-task-def.outputs.taskDefinitionArn }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
